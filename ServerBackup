import java.io.*;
import java.nio.file.*;
import java.util.*;
import java.rmi.*;
import java.rmi.server.*;
import java.rmi.registry.*;

public class FileServer extends UnicastRemoteObject implements ServerInterface {

	public static void main( String args[] ) {
		// verify arguments
		int port = 0;
		try {
		    if ( args.length == 1 ) {
			port = Integer.parseInt( args[0] );
			if ( port < 5001 || port > 65535 )
			    throw new Exception( );
		    }
		    else 
			throw new Exception( );
		} catch ( Exception e ) {
		    System.err.println( "usage: java Server port" );
		    System.exit( -1 );
		}

		try {     
		    startRegistry( port );
		    FileServer serverObject = new FileServer( port );
		    Naming.rebind( "rmi://localhost:" + port + "/server", serverObject );
		    System.out.println( "Server ready." );
		} catch ( Exception e ) {
		    e.printStackTrace( );
		    System.exit( -1 );
		}
    }

    private static void startRegistry( int port ) throws RemoteException {
		try {
		    Registry registry = 
			LocateRegistry.getRegistry( port );
		    registry.list( );  
		}
		catch ( RemoteException e ) { 
		    Registry registry = 
			LocateRegistry.createRegistry( port );
		}
    }




   	// ------------------------- SERVER STARTS HERE -----------------------------
    private int clientPort = 0;					// we'll use this port for connection
	private Vector<ServerEntry> entryList; 		// stores files that have been read
	private boolean success;
    
    public FileServer(int port) throws RemoteException {
    	clientPort = port;
    	entryList = new Vector<ServerEntry>();
    }

    public FileContents download( String clientIp, String fileName, String mode )
		throws RemoteException 
	{

		if (mode.equals("r"))
			System.out.println("Read-Download Request From: " + clientIp + ", fileName: " + fileName + ", mode: " + mode + ".");
		else 
			System.out.println("Write-Download Request From: " + clientIp + ", fileName: " + fileName + ", mode: " + mode + ".");

		// check if the mode is valid
		if ( !mode.equals("r") && !mode.equals("w") ) {
			System.out.println(mode + ": Unknown download mode. Download request not served.");
			return null;
		}

		// check if file is in cache
		if ( !isInCache(fileName) ) {
			// read from disk to memory 
			try {
				File file = new File(fileName);
				if ( !file.exists() )
					return null;
				byte[] content = Files.readAllBytes( file.toPath() ); // read from disk
				ServerEntry newEntry = new ServerEntry(fileName, content);
				entryList.add(newEntry);
			} catch (Exception e) {
				System.out.println("Error: in download()");
			}
		}

		ServerEntry targetEntry = getEntry(fileName);

		// if file doesn't exist
		if (targetEntry == null)	
			return null;

		FileContents outputContent = new FileContents( targetEntry.getContent() );	
		if (mode.equals("r")) {
			if ( !targetEntry.readerList.contains( clientIp ) ) 
				targetEntry.readerList.add(clientIp); 	// adds to reader list
			if (targetEntry.isNotShared())
				targetEntry.stateToReadShared();

		} else { // if mode is "W"
			if (targetEntry.isReadShared() || targetEntry.isNotShared()) {
				targetEntry.setOwner(clientIp);				// updates owner
				targetEntry.stateToWriteShared();			// updates state
			} else if ( targetEntry.isWriteShared() ) { // if state is writeshared or ownershipchange

				targetEntry.stateToOwnershipChanged(); 
				ClientInterface fileOwner = connectToClient( targetEntry.owner );
				success = fileOwner.writeback();				// tells the client to writeback the file	
				if (!success) {
					synchronized (this) {
						try {
							wait();
							success = false;	
						} catch (InterruptedException e) {
							System.out.println("InterruptedException when receving download for write 1.");
						}
					}
				}
				targetEntry.setOwner(clientIp);
				targetEntry.stateToWriteShared();	

				if (targetEntry.numOfWriter > 0) {
					fileOwner = connectToClient( targetEntry.owner );
					targetEntry.stateToOwnershipChanged();					
					fileOwner.writeback();
				}

			} else { // if targetEntry is in OWNERSHIP_CHANGE state
				synchronized (this) {
					targetEntry.numOfWriter++;
					try {
						wait();
						ClientInterface fileOwner = null;
						targetEntry.setOwner(clientIp);
						targetEntry.stateToWriteShared();
						targetEntry.numOfWriter--;

						if (targetEntry.numOfWriter > 0) {
							fileOwner = connectToClient( targetEntry.owner );
							targetEntry.stateToOwnershipChanged();					
							fileOwner.writeback();
						}
					} catch (InterruptedException e) {
						System.out.println("InterruptedException when receving download for write 2.");
					}
				}

			}
		}
		
		return outputContent;
	}



    public boolean upload( String clientIp, String fileName, FileContents contents ) 
    	throws RemoteException 
	{	
		System.out.println("Received upload request from: " + clientIp + ".");
		// check if file in cache
		if ( !isInCache(fileName) )
			return false;

		// check state of the cache
		ServerEntry entry = getEntry(fileName);
		if ( entry.isNotShared() || entry.isReadShared() )
			return false;
		else if ( entry.isWriteShared() ) {
			entry.content = contents.get();
			invalidateCopies(entry);
			entry.stateToNotShared();
			entry.resetOwner();
		}else { // entry's state is Ownership_change
			synchronized (this) {
				entry.content = contents.get();
				invalidateCopies(entry);
				notify();  		// resume the downloads of other threads
			}
		}
		return false;
	}


	// ------------------------ PRVIATE FUNCTIONS --------------------------------
	private void invalidateCopies(ServerEntry targetEntry) {
		Vector<String> readerList = targetEntry.readerList;
		for (int i = 0; i < readerList.size(); i++) {
			try {
				ClientInterface reader = ( ClientInterface )
						Naming.lookup( "rmi://" + readerList.get(i) + ":" + clientPort + "/client" );
				reader.invalidate();
			}catch (Exception e) {
				System.out.println("Error: when invalidating client.");
			}
		}
		readerList.removeAllElements();
		// System.out.println("All readers of " + targetEntry.fileName + " are removed.");
	}

	private ClientInterface connectToClient(String clientIp) {
		try {
		    ClientInterface client =  ( ClientInterface )
					Naming.lookup( "rmi://" + clientIp + ":" + clientPort + "/client" );
			return client;
		}catch ( Exception e ) { 
			System.out.println("Error: in connectToClient()");
			return null;
		}
	}

	private boolean isInCache(String fileName) {
		for (int i = 0; i < entryList.size(); i++) {
			if (entryList.get(i).isFileName(fileName))
				return true;
		}
		return false;
	}

	private ServerEntry getEntry(String fileName) {
		for (int i = 0; i < entryList.size(); i++) {
			ServerEntry curEntry = entryList.get(i);
			if (curEntry.isFileName(fileName))
				return curEntry;
		}
		return null;
	}


}
